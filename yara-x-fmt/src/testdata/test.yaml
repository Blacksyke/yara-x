###############################################################################

- unformatted: |
    rule test{condition:true}
  formatted: |
    rule test {
      condition:
        true
    }

###############################################################################

- unformatted: |
    rule test {condition:
    true}
  formatted: |
    rule test {
      condition:
        true
    }

###############################################################################

- unformatted: |
    rule test {
    condition:
    true
    
    }
  formatted: |
    rule test {
      condition:
        true
    }

###############################################################################

- unformatted: |
    rule test1 {condition:true} rule test2 {condition:true}
  formatted: |
    rule test1 {
      condition:
        true
    }
    
    rule test2 {
      condition:
        true
    }


###############################################################################

- unformatted: |
    import "test1" import "test2" rule test1 {condition:true} rule test2 {condition:true}
  formatted: |
    import "test1"
    import "test2"
    
    rule test1 {
      condition:
        true
    }
    
    rule test2 {
      condition:
        true
    }

###############################################################################

- unformatted: |
    import "test1" 
    import "test2" 
    rule test1 {condition:true} 
    rule test2 {condition:true}
  formatted: |
    import "test1"
    import "test2"
    
    rule test1 {
      condition:
        true
    }
    
    rule test2 {
      condition:
        true
    }

###############################################################################

- unformatted: |
    import "test" /* Comment */ rule test1 {condition:true} /* Comment */ rule test2 {condition:true}
  formatted: |
    import "test"
    /* Comment */
    rule test1 {
      condition:
        true
    }
    /* Comment */
    rule test2 {
      condition:
        true
    }

###############################################################################

- unformatted: |
    import "test" // Comment
    rule test {
    strings: $a = "foo"
    condition:true}
  formatted: |
    import "test"// Comment
    rule test {
      strings:
        $a = "foo"
      condition:
        true
    }
    

###############################################################################

- unformatted: |
    rule test {
    meta:
      
      a = 1
    
    strings: 
      $a = "foo"
    
    condition:
    
      true}
  formatted: |
    rule test {
      meta:
        a = 1
      strings:
        $a = "foo"
      condition:
        true
    }

###############################################################################

- unformatted: |
    global
    private
    rule test {
      condition:
        true
    }
  formatted: |
    global private rule test {
      condition:
        true
    }

###############################################################################

- unformatted: |
    rule test : 
      tag1 
      tag2 
    {
      condition:
        true
    }
  formatted: |
    rule test: tag1 tag2 {
      condition:
        true
    }

###############################################################################


- unformatted: |
    import "test" // Comment
    // Comment
    rule test {
      condition:true
    }
    // Comment
    rule test2 {
      condition: true
    }
  formatted: |
    import "test"// Comment
    
    // Comment
    rule test {
      condition:
        true
    }
    
    // Comment
    rule test2 {
      condition:
        true
    }

###############################################################################

- unformatted: |
    rule test {
      meta:
        one = 1
        two = 2
        three = 3
      strings:
        $short = "foo"
        $longer = "bar"
        $very_long = "baz"
      condition:
        true
    }
  formatted: |
    rule test {
      meta:
        one = 1
        two = 2
        three = 3
      strings:
        $short     = "foo"
        $longer    = "bar"
        $very_long = "baz"
      condition:
        true
    }

###############################################################################

- unformatted: |
    rule test {
      strings:
        $hex = {000102030405}
      condition:
        $hex
    }
  formatted: |
    rule test {
      strings:
        $hex = { 00 01 02 03 04 05 }
      condition:
        $hex
    }

###############################################################################
#
#- unformatted: |
#    rule test {
#      strings:
#        $hex = {
#          00 01 02   // foo
#          03 04 05   // bar
#        }
#      condition:
#        $hex
#    }
#  formatted: |
#    rule test {
#      strings:
#        $hex = { 00 01 02 03 04 05 }
#      condition:
#        $hex
#    }
#
################################################################################

- unformatted: |
    rule test {
      condition:
        -(1+1)*2==-4 + (3 - 1)
    }
  formatted: |
    rule test {
      condition:
        - (1 + 1) * 2 == -4 + (3 - 1)
    }

###############################################################################

- unformatted: |
    rule test {
      condition:
        for all x in ( 0 .. 10) : ( some.array[ 0 ] == some.ident )
    }
  formatted: |
    rule test {
      condition:
        for all x in (0..10): (some.array[0] == some.ident)
    }

###############################################################################

- unformatted: |
    rule test {
      strings:
        $a = "foo" xor(0 - 10) base64 ("foo")
      condition:
        #a[ 0] == 0 and !a [0] == 0 and @a[ 0 ] == 0
    }
  formatted: |
    rule test {
      strings:
        $a = "foo" xor(0-10) base64("foo")
      condition:
        #a[0] == 0 and !a[0] == 0 and @a[0] == 0
    }

###############################################################################


- unformatted: |
    rule test {
      strings:
        $hex = {00[-]01[1-]0203[0-1]0405(06|07)08}
      condition:
        $hex
    }
  formatted: |
    rule test {
      strings:
        $hex = { 00 [-] 01 [1-] 02 03 [0-1] 04 05 (06 | 07) 08 }
      condition:
        $hex
    }

###############################################################################