###############################################################################

- rule: |
    rule test {
      condition:
        1 + 2.5 * -2 * -1.0 == 10.0 \ 2 + -(-1)
    }
  ast: |
    root
    └─ namespace
       └─ rule test
          └─ condition
             └─ eq : boolean(true)
                ├─ add : float(6.0)
                │  ├─ 1
                │  └─ mul : float(5.0)
                │     ├─ mul : float(-5.0)
                │     │  ├─ 2.5
                │     │  └─ -2
                │     └─ -1.0
                └─ add : float(6.0)
                   ├─ div : float(5.0)
                   │  ├─ 10.0
                   │  └─ 2
                   └─ minus : integer(1)
                      └─ -1

###############################################################################

- rule: |
    rule test {
      condition:
        (1 + 2.5) * -2 * -1.0 == 10.0 \ (2 + -(-1))
    }
  ast: |
    root
    └─ namespace
       └─ rule test
          └─ condition
             └─ eq : boolean(false)
                ├─ mul : float(7.0)
                │  ├─ mul : float(-7.0)
                │  │  ├─ add : float(3.5)
                │  │  │  ├─ 1
                │  │  │  └─ 2.5
                │  │  └─ -2
                │  └─ -1.0
                └─ div : float(3.3)
                   ├─ 10.0
                   └─ add : integer(3)
                      ├─ 2
                      └─ minus : integer(1)
                         └─ -1

###############################################################################

- rule: |
    rule test {
      condition:
        5 \ 2 == 8 % 3
    }
  ast: |
    root
    └─ namespace
       └─ rule test
          └─ condition
             └─ eq : boolean(true)
                ├─ div : integer(2)
                │  ├─ 5
                │  └─ 2
                └─ mod : integer(2)
                   ├─ 8
                   └─ 3

###############################################################################

- rule: |
    rule test {
      condition:
        // The result of integer division and modulo where divisor is zero is
        // undefined, therefore their value at compile time will be unkown.
        10 \ 0 == 10 % 0
    }
  ast: |
    root
    └─ namespace
       └─ rule test
          └─ condition
             └─ eq
                ├─ div
                │  ├─ 10
                │  └─ 0
                └─ mod
                   ├─ 10
                   └─ 0

###############################################################################

- rule: |
    rule test {
      condition:
        // Floating-point division and modulo where divisor is zero. Unlike the
        // integer case, the result of such operation is defined and their values
        // at compile time can be computed.
        5.0 \ 0 == 10 % 0.0
    }
  ast: |
    root
    └─ namespace
       └─ rule test
          └─ condition
             └─ eq : boolean(false)
                ├─ div : float(inf)
                │  ├─ 5.0
                │  └─ 0
                └─ mod : float(NaN)
                   ├─ 10
                   └─ 0.0

###############################################################################